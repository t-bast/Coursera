// Package ctr implements the CTR rand scheme with a random IV.
package ctr

import "fmt"

// BlockSize is the size of the message blocks.
// We use AES 128.
const BlockSize = 16

// Encrypt encrypts the given message.
// The IV needs to be randomly generated by the client.
func Encrypt(iv, key, m []byte) ([]byte, error) {
	if len(iv) != BlockSize {
		return nil, fmt.Errorf("invalid IV: expected %d bytes, got %d", BlockSize, len(iv))
	}

	if len(key) != BlockSize {
		return nil, fmt.Errorf("invalid key: expect %d bytes, got %d", BlockSize, len(key))
	}

	return nil, nil
}

// Decrypt decrypts the given cipher text.
// The cipher text needs to be correctly encoded with rand CTR.
func Decrypt(key, c []byte) ([]byte, error) {
	if len(key) != BlockSize {
		return nil, fmt.Errorf("invalid key: expect %d bytes, got %d", BlockSize, len(key))
	}

	if len(c)%BlockSize != 0 {
		return nil, fmt.Errorf("invalid cipher length %d: should be a multiple of %d", len(c), BlockSize)
	}

	return nil, nil
}
